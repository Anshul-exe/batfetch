#!/usr/bin/env bash

log(){

    # Do nothig if info field is empty.
    [ "$2" ] || return

    # Store the value of '$1' as we reset the argument list below.
    name=$1
    
    # Use 'set --' as a means of stripping all leading and trailing
    # white-space from the info string. This also normalizes all
    # white-space inside of the string.
    #
    # Disable the shellcheck warning for word-splitting
    # as it's safe and intended ('set -f' disables globbing).
    {
        set -f
        set +f -- $2
        info=$*
    }

    # Move the courcer toward right to print name and info right
    # of the ascii with an aditional gap using BF_GAP = variable. 
    printf '[%sC' "$(( $ascii_width + ${BF_GAP:-4}))"
    # printf '[%sC' "$(( $ascii_width + ${BF_GAP:-4}))"

    # Print the info name with color
    # printf '[3%s;1m%s[m' "${BF_COL1:-2}" "$name"
    printf '[3%s;1m%s[m' "${BF_COL1}" "$name"

    # Move courcer backword at starting of info name and then move
    # it forward ( max-info-name + extra gap ) to alogn all information.
    printf '[%sD[%sC' "${#name}" "${PF_INFOALIGN:-$(($info_length + 1))}"

    # Print the information striping all the extra spaces.
    printf '[3%sm%s[m\n' "${BF_COL2}" "$info"
    # printf '[3%sm%s[m\n' "${BF_COL2:-7}" "$info"

    # Incriment whenever log is called to keep track of lenfo info_height 
    # so that correctely align the the prompet. 
    info_height=$((${info_height:-0} + 1))
}

# batfetch default config.
read -rd '' config <<'EOF'
# Config file defining color variables BF_COL1, BF_COL2, and BF_COL3

# Generic color list.
# Disable warning about unused variables.
# shellcheck disable=2034
{
    c1='[31m'; c2='[32m'
    c3='[33m'; c4='[34m'
    c5='[35m'; c6='[36m'
    c7='[37m'; c8='[38m'
}

#                            BF_COL1
#  ðŸ¬­ðŸ¬­ðŸ¬­â–ˆâ–ˆâ–ˆâ–ˆâ–ˆðŸ¬­ðŸ¬­ðŸ¬­               /
#  â–ˆ         â–ˆ  ashishk@nandu
#  â–ˆ         â–ˆ  model   LGC 5B10W138
#  â–ˆ   97%   â–ˆ  charge  97% AC pluged
#  â–ˆ         â–ˆ  power   0W performance
#  â–ˆ    ðŸ—²    â–ˆ  state   connected & Not charging
#  â–ˆ         â–ˆ  health  80% | cycles 772
#  ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚   |                      \
#              BF_COL3                   BF_COL2  
# 


# BF_COL1: possible value 1/2/3/4/5/6/7/8
# Default = 2
# BF_COL1=2

# BF_COL2: possible value 1/2/3/4/5/6/7/8
# Default = 7
# BF_COL2=7

# BF_COL3: possible value 1/2/3/4/5/6/7/8
# Default = 6
# BF_COL3=6
EOF

load_config(){
  
    if [[ -f "${XDG_CONFIG_HOME}/batfetch/config.conf" ]]; then
        config_path="${XDG_CONFIG_HOME}/batfetch/config.conf"
        source "${XDG_CONFIG_HOME}/batfetch/config.conf"

    elif [[ -f "${XDG_CONFIG_HOME}/batfetch/config" ]]; then
        config_path="${XDG_CONFIG_HOME}/batfetch/config"
        source "${XDG_CONFIG_HOME}/batfetch/config"

    else 
        config_file="${XDG_CONFIG_HOME}/batfetch/config.conf"

        # The config file doesn't exist, create it.
        mkdir -p "${XDG_CONFIG_HOME}/batfetch/"
        printf '%s\n' "$config" > "$config_file"
    fi 
}




# This function gets the title of the current user and host and prints it out using the log function.
get_title() {

    # Get the current user. If the USER environment variable is not set, use the result of the id -un command.
    user=${USER:-$(id -un)}

    # Get the hostname. If the HOSTNAME environment variable is not set, use the output of the hostname command.
    # If the hostname command fails, use the hostname variable if it is set.
    hostname=${HOSTNAME:-${hostname:-$(hostname)}}

    # Use the log function to print the user and hostname in the format "[user]@[hostname]".
    # The BF_COL3 variable is used to set the color of the text (in this case, the color code is 1).
    # If BF_COL3 is not set, use the default color (code 7).
    log "[3${BF_COL3:-1}m${user}${c8}@[3${BF_COL3:-1}m${hostname}" " "
} 

get_model(){
  vandor=$(cat /sys/class/power_supply/BAT*/manufacturer)
  model=$(cat /sys/class/power_supply/BAT*/model_name)
  log "model" "$vandor $model"
}

get_charge(){
  charge="$(cat /sys/class/power_supply/BAT*/capacity)%"
  Energy_now="$(cat /sys/class/power_supply/BAT*/energy_now)"
  Draw="$(cat /sys/class/power_supply/BAT*/power_now)"

  if [ $Draw = 0 ]; then
      ESTIMATION="AC pluged "
  else
      time=$(echo "scale=4; $Energy_now / $Draw" | bc)
      hours=${time%.*}
      decimal_part=$(echo "$time" | cut -d '.' -f 2)
      minutes=$((decimal_part * 60 / 10000))
      ESTIMATION="${hours}h ${minutes}m"
  fi
  log "charge" "$charge $ESTIMATION"
}

get_power(){
  powerDraw="$(($(cat /sys/class/power_supply/BAT*/power_now)/1000000))W"
  governer="$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)"
  log "power" "$powerDraw $governer"
}

get_state(){
  # online=$(${$(cat /sys/class/power_supply/AC*/online)}:- ${$(cat /sys/class/power_supply/AC*/state)})
  online=$(cat /sys/class/power_supply/A*/online)
# online= [ -f /sys/class/power_supply/AC*/online ] && cat /sys/class/power_supply/AC*/online \
#         ||  [ -f /sys/class/power_supply/A*/state ] && cat next.txt
  if [[ $online -eq 1 ]]; then
     powerInput="connected"
  else
    powerInput="not connected"
  fi
  status="$(cat /sys/class/power_supply/BAT*/status)"
  log "state" "$powerInput & $status"
}

get_health(){
   health=$(($(cat /sys/class/power_supply/BAT*/energy_full) * 100 / $(cat /sys/class/power_supply/BAT*/energy_full_design)))
   cycle=$(cat /sys/class/power_supply/BAT*/cycle_count)
   log "health" "$health% |  cycles $cycle"
}

get_ascii(){
  _charge=$(cat /sys/class/power_supply/BAT*/capacity) # This is the battery percentage
  if [[ $_charge == 100 ]]; then
     var1="â–ˆ   FULL  â–ˆ"
  else
    var1="â–ˆ   $_charge%   â–ˆ"
  fi  
  online=${online:-$(cat /sys/class/power_supply/A*/online)}
    if [[ $online -eq 1 ]]; then
       var2=${var2:-"ðŸ—²"}
    else
       var2=${var2:-" "}
    fi
cat << EOF
  ðŸ¬­ðŸ¬­ðŸ¬­â–ˆâ–ˆâ–ˆâ–ˆâ–ˆðŸ¬­ðŸ¬­ðŸ¬­
  â–ˆ         â–ˆ
  â–ˆ         â–ˆ
  $var1
  â–ˆ         â–ˆ
  â–ˆ    $var2    â–ˆ
  â–ˆ         â–ˆ
  ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚
EOF
   ascii_width=11
   ascii_height=7

  # BF_COL1=${BF_COL1:-${1:-7}}
  # BF_COL3=${BF_COL2:-$((${1:-7}%8+1))}

   printf '[m[%sA' "$ascii_height"
}

# batfetch default config.
read -rd '' config <<'EOF'
# Config file defining color variables BF_COL1, BF_COL2, and BF_COL3

# Generic color list.
# Disable warning about unused variables.
# shellcheck disable=2034
{
    c1='[31m'; c2='[32m'
    c3='[33m'; c4='[34m'
    c5='[35m'; c6='[36m'
    c7='[37m'; c8='[38m'
}

#                BF_COL4     BF_COL1
#  ðŸ¬­ðŸ¬­ðŸ¬­â–ˆâ–ˆâ–ˆâ–ˆâ–ˆðŸ¬­ðŸ¬­ðŸ¬­        \      /
#  â–ˆ         â–ˆ  ashishk@nandu
#  â–ˆ         â–ˆ  model   LGC 5B10W138
#  â–ˆ   97%   â–ˆ  charge  97% AC pluged
#  â–ˆ         â–ˆ  power   0W performance
#  â–ˆ    ðŸ—²    â–ˆ  state   connected & Not charging
#  â–ˆ         â–ˆ  health  80% | cycles 772
#  ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚ðŸ®‚   |                      \
#              BF_COL3                   BF_COL2  
# 

# [COLOR]
# Manage your output's color
#
# COLOR: possible values true/false
# Default = true
COLOR=true

# BF_COL1: possible value 1/2/3/4/5/6/7/8
# Default = 2
# BF_COL1=2

# BF_COL2: possible value 1/2/3/4/5/6/7/8
# Default = 7
# BF_COL2=7

# BF_COL3: possible value 1/2/3/4/5/6/7/8
# Default = 6
# BF_COL3=6
EOF

load_config(){
  
    if [[ -f "${XDG_CONFIG_HOME}/batfetch/config.conf" ]]; then
        config_path="${XDG_CONFIG_HOME}/batfetch/config.conf"
        source "${XDG_CONFIG_HOME}/batfetch/config.conf"
        return

    elif [[ -f "${XDG_CONFIG_HOME}/batfetch/config" ]]; then
        config_path="${XDG_CONFIG_HOME}/batfetch/config"
        source "${XDG_CONFIG_HOME}/batfetch/config"
        return

    elif [[ -z "$config_path" ]]; then
        config_file="${XDG_CONFIG_HOME}/batfetch/config.conf"

        # The config file doesn't exist, create it.
        mkdir -p "${XDG_CONFIG_HOME}/batfetch/"
        printf '%s\n' "$config" > "$config_file"
    fi 
}

load_colors(){

  COLOR=${COLOR:-true}

  if [[ $COLOR = true ]]; then
      BF_COL1=${BF_COL1:-2}
      BF_COL2=${BF_COL2:-7}
      BF_COL3=${BF_COL2:-6}
  else
      BF_COL1=8
      BF_COL2=8
      BF_COL3=8
  fi
}


main(){
    
    # Hide 'stderr' unless the first argument is '-v'. This saves
    # polluting the script with '2>/dev/null'.
    [ "$1" = -v ] || exec 2>/dev/null


   load_config
   
   load_colors
  
  # Disable globbing and set the positional parameters 
  set -f
  set +f ascii title model charge power state health  



  # Iterate over the info functions to determine the lengths of the
  # "info names" for output alignment. The option names and subtitles
  # match 1:1 so this is thankfully simple
  for info; do
      command -v "get_$info" >/dev/null || continue
  # This was a ternary operation but they aren't supported in
  # Minix's shell.
  [ "${#info}" -gt "${info_length:-0}" ] &&
     info_length=${#info}
  done

  # Add an additional space of length to act as a gap.
  info_length=$((info_length + 1 ))

  # Iterate over the above list and run any existing "get_" functions.
  for info; do "get_$info"; done

    # This was a ternary operation but they aren't supported in Minix's shell.
    [ "${info_height:-0}" -lt "${ascii_height:-0}" ] &&
        cursor_pos=$((ascii_height - info_height - 1 ))
        
    # Move courcer downword after printing all the information
    # to position prompt correctly
    while [ "${i:=0}" -le "${cursor_pos:-0}" ]; do 
      printf '\n' 
      i=$((i + 1))
    done
  }
  echo ""
main "$@"
